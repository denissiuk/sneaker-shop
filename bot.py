import asyncio
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7948836165:AAE7259aOJU8kbFIkzucQhg3vtJLkz4pm18"  # ‚Üê –ó–ê–ú–ï–ù–ò –≠–¢–û!
ADMIN_ID = 400089744  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID!

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data='catalog')],
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="http://127.0.0.1:5000")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ NANOGI üõí\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç.",
        reply_markup=reply_markup
    )

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    products = [
        {"name": "Nike", "price": "129.0 BYN", "photo": "https://via.placeholder.com/200 "},
        {"name": "Salomon", "price": "182.0 BYN", "photo": "https://via.placeholder.com/200 "}
    ]

    for product in products:
        await update.message.reply_photo(
            photo=product["photo"],
            caption=f"<b>{product['name']}</b>\n{product['price']}\n\n–î–æ–±–∞–≤—å –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ —Å–∞–π—Ç!",
            parse_mode="HTML"
        )

    # –ö–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç¬ª
    keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="http://127.0.0.1:5000")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤—å –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ —Å–∞–π—Ç–µ!", reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'catalog':
        await catalog(query, context)

async def notify_admin(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram"""
    if bot:
        try:
            await bot.send_message(chat_id=ADMIN_ID, text=message)
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    global bot
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("catalog", catalog))
    application.add_handler(CallbackQueryHandler(button_callback))

    bot = application.bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    application.run_polling()

if __name__ == '__main__':
    run_bot()
