from flask import Flask, render_template, request, redirect, url_for, session, flash
from models import db, User, Sneaker, CartItem, Order
from datetime import datetime
import asyncio
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'supersecretkey'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///shop.db')
if DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)
app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
with app.app_context():
    db.create_all()
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç)
    if not User.query.filter_by(username='admin').first():
        admin = User(username='admin', email='admin@example.com', is_admin=True)
        db.session.add(admin)
        db.session.commit()

# –î–æ–±–∞–≤–ª—è–µ–º CartItem –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤
@app.context_processor
def inject_cartitem():
    return dict(CartItem=CartItem)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è app
from bot import notify_admin

# –ì–ª–∞–≤–Ω–∞—è ‚Äî –∫–∞—Ç–∞–ª–æ–≥
@app.route('/')
def index():
    sneakers = Sneaker.query.all()
    return render_template('index.html', sneakers=sneakers)

# –ê–¥–º–∏–Ω–∫–∞ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∞–º–∏
@app.route('/admin', methods=['GET', 'POST'])
def admin():
    if not session.get('user_id'):
        flash('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.')
        return redirect('/login')
    user = User.query.get(session['user_id'])
    if not user or not user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
        return redirect('/')
    
    if request.method == 'POST':
        name = request.form['name']
        price = float(request.form['price'])
        image_url = request.form.get('image_url') or '/static/default.jpg'
        sneaker = Sneaker(name=name, price=price, image_url=image_url)
        db.session.add(sneaker)
        db.session.commit()
        flash('–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
        return redirect('/admin')
    
    sneakers = Sneaker.query.all()
    return render_template('admin.html', sneakers=sneakers)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@app.route('/admin/edit/<int:id>', methods=['GET', 'POST'])
def edit_sneaker(id):
    if not session.get('user_id'):
        return redirect('/login')
    user = User.query.get(session['user_id'])
    if not user or not user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return redirect('/')
    
    sneaker = Sneaker.query.get_or_404(id)
    
    if request.method == 'POST':
        sneaker.name = request.form['name']
        sneaker.price = float(request.form['price'])
        sneaker.image_url = request.form.get('image_url') or '/static/default.jpg'
        db.session.commit()
        flash('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!')
        return redirect('/admin')
    
    return render_template('edit_sneaker.html', sneaker=sneaker)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@app.route('/admin/delete/<int:id>', methods=['POST'])
def delete_sneaker(id):
    if not session.get('user_id'):
        return redirect('/login')
    user = User.query.get(session['user_id'])
    if not user or not user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return redirect('/')
    
    sneaker = Sneaker.query.get_or_404(id)
    db.session.delete(sneaker)
    db.session.commit()
    flash('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!')
    return redirect('/admin')

@app.route('/edit_price/<int:id>', methods=['POST'])
def edit_price(id):
    if not session.get('user_id'):
        return redirect('/login')
    user = User.query.get(session['user_id'])
    if not user or not user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return redirect('/')
    
    sneaker = Sneaker.query.get(id)
    if sneaker:
        sneaker.price = float(request.form['price'])
        db.session.commit()
        flash('–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
    return redirect('/admin')

# –õ–æ–≥–∏–Ω (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        user = User.query.filter_by(username=username).first()
        if user:
            session['user_id'] = user.id
            return redirect('/profile')
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–µ–º–æ)
            user = User(username=username, email=f"{username}@example.com")
            db.session.add(user)
            db.session.commit()
            session['user_id'] = user.id
            return redirect('/profile')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect('/')

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@app.route('/profile')
def profile():
    if not session.get('user_id'):
        return redirect('/login')
    user = User.query.get(session['user_id'])
    return render_template('profile.html', user=user)

# –ö–æ—Ä–∑–∏–Ω–∞
@app.route('/cart')
def cart():
    if not session.get('user_id'):
        return redirect('/login')
    user = User.query.get(session['user_id'])
    items = CartItem.query.filter_by(user_id=user.id).all()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π Sneaker
    valid_items = []
    total = 0.0

    for item in items:
        sneaker = Sneaker.query.get(item.sneaker_id)
        if sneaker:
            valid_items.append(item)
            total += item.quantity * sneaker.price
        else:
            # –£–¥–∞–ª—è–µ–º "–±–∏—Ç—ã–π" —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            db.session.delete(item)

    db.session.commit()

    return render_template('cart.html', items=valid_items, total=total)

# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
@app.route('/add_to_cart/<int:sneaker_id>')
def add_to_cart(sneaker_id):
    if not session.get('user_id'):
        return redirect('/login')
    user_id = session['user_id']
    item = CartItem.query.filter_by(user_id=user_id, sneaker_id=sneaker_id).first()
    if item:
        item.quantity += 1
    else:
        item = CartItem(user_id=user_id, sneaker_id=sneaker_id, quantity=1)
        db.session.add(item)
    db.session.commit()
    return redirect('/cart')

# –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@app.route('/remove_from_cart/<int:sneaker_id>')
def remove_from_cart(sneaker_id):
    if not session.get('user_id'):
        return redirect('/login')
    user_id = session['user_id']
    item = CartItem.query.filter_by(user_id=user_id, sneaker_id=sneaker_id).first()
    if item:
        db.session.delete(item)
        db.session.commit()
    return redirect('/cart')

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@app.route('/checkout', methods=['POST'])
def checkout():
    if not session.get('user_id'):
        return redirect('/login')
    user_id = session['user_id']
    items = CartItem.query.filter_by(user_id=user_id).all()
    if not items:
        return redirect('/cart')

    full_name = request.form['full_name']
    phone = request.form['phone']
    address = request.form['address']
    delivery_cost = 12.0

    total = 0.0
    for item in items:
        sneaker = Sneaker.query.get(item.sneaker_id)
        if sneaker:
            total += item.quantity * sneaker.price
        else:
            db.session.delete(item)
    db.session.commit()

    total_with_delivery = total + delivery_cost

    order = Order(
        user_id=user_id,
        total=total_with_delivery,
        delivery_info=f"–§–ò–û: {full_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}, –ê–¥—Ä–µ—Å: {address}, –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±."
    )
    db.session.add(order)
    db.session.delete(CartItem.query.filter_by(user_id=user_id))
    db.session.commit()

    print(f"üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}, —Å—É–º–º–∞: {total_with_delivery} —Ä—É–±.")
    print(f"–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {full_name}, {phone}, {address}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    try:
        asyncio.run(notify_admin(
            f"üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n"
            f"–°—É–º–º–∞: {total_with_delivery} BYN\n"
            f"–§–ò–û: {full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ê–¥—Ä–µ—Å: {address}"
        ))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    flash('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª—ë–Ω.')
    return redirect('/profile')

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û False –Ω–∞ Render!
    )